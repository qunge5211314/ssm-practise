一、什么是AOP
    AOP为Aspect Oriented Programming的缩写，
    意思为面向切面的编程，
    是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。
二、AOP的作用及其优势
    作用： 在程序运行期间，在不修改源码的情况下对目标方法进行功能增强
    优势： 减少重复代码，提高开发效率，并且便于维护
三、AOP的底层实现
    实际上，AOP的底层是通过Spring提供的动态代理技术实现的。在运行期间，
    Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，
    再去调用目标对象的方法，从而完成功能的增强。
四、AOP的动态代理技术
    常用的动态代理技术
    1、JDK代理：基于接口的动态代理技术
    2、cglib代理：基于父类的动态代理技术
五、AOP的相关概念
    AOP的实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式，完成指定目标的方法增强
    在正式讲解AOP的操作之前，我们必须理解AOP的相关术语，常用的术语如下：
        1、Target(目标对象)：代理的目标对象
        2、Proxy(代理对象)：一个类被AOP织入增强后，就产生一个结果代理类
        3、Joinpoint(连接点)：所谓连接点是指那些被拦截到的点。在spring中，这些点指的是方法，因为spring只支持方法类型的连接点
        4、Pointcut(切入点)：所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。
        5、Advice(通知/增强)：所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。
        6、Aspect(切面)：是切入点和通知(引介)的结合
        7、Weaving(织入)：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入
六、AOP开发明确的事项
    1、需要编写的内容：
        * 编写核心业务代码(目标类和目标方法)
        * 编写切面类，切面类中有通知(增强功能方法)
        * 在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合
    2、AOP技术实现的内容：
        spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，
        在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。
    3、AOP底层使用哪种代理方式
        在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。
七、知识要点
    AOP：面向切面编程
    AOP底层实现：基于JDK的动态代理和基于Cglib的动态代理
    AOP的重点概念：
        Pointcut(切入点)：被增强的方法
        Advice(通知/增强)：封装增强业务逻辑的方法
        Aspect(切面)：切点+通知
        Weaving(织入)：将切点与通知结合的过程
    开发明确事项：
        谁是切点(切点表达式配置)
        谁是通知(切面类中的增强方法)
        将切点和通知进行织入配置
八、切点表达式
    表达式语法：
        execution([修饰符] 返回值类型 包名.类名.方法名(参数))
        * 访问修饰符可以省略
        * 返回值类型、包名、类名、方法名可以使用星号*代表任意
        * 包名与类名之间一个点.代表当前包下的类，两个点代表当前包及其子包下的类
        * 参数列表可以使用两个点..表示任意个数，任意类型的参数列表
九、通知的类型
    前置通知 before 指定增强的方法在切入点方法之前执行
    后置通知 after-returning 指定增强的方法在切入点方法之后执行
    环绕通知 around 指定增强的方法在切入点方法之前和之后都执行
    异常抛出通知 throwing 指定增强的方法在出现异常时执行
    最终通知 after 无论增强方式执行是否有异常都会执行
十、切点表达式抽取
    当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用pointcut-ref属性代替pointcut属性来引用抽取后的切点表达式

